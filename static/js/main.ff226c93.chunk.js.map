{"version":3,"sources":["Components/Header.js","Components/Footer.js","Components/List.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","placeholder","autoFocus","onKeyDown","e","keyCode","addToList","target","value","TodoFooter","href","List","id","type","htmlFor","todoList","map","item","index","checked","chacked","onClick","name","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","itemName","console","log","setState","prev","concat","toConsumableArray","Components_Header","Components_List","Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff226c93.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\nfunction Header(props){\r\n    return(\r\n        <header className=\"header\">\r\n            <h1>todos</h1>\r\n            <input\r\n                className=\"new-todo\"\r\n                placeholder=\"What needs to be done?\"\r\n                autoFocus\r\n                onKeyDown={(e) => {\r\n                       if (e.keyCode === 13){\r\n                            props.addToList(e.target.value);\r\n                       }\r\n                   }\r\n                   }\r\n            />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport App from \"../App\";\r\n\r\nconst TodoFooter = (props) => {\r\n    return(\r\n        <footer className=\"footer\">\r\n            <span className=\"todo-count\"></span>\r\n            <ul className=\"filters\">\r\n                <li>\r\n                    <a href=\"#/\" className=\"selected\">All</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#/active\">Active</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#/completed\">Completed</a>\r\n                </li>\r\n            </ul>\r\n            <button className=\"clear-completed\">Clear completed</button>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default TodoFooter;","import React from \"react\";\r\nimport App from \"../App\";\r\n\r\nconst List = (props) => {\r\n    return(\r\n        <section className=\"main\">\r\n            <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" />\r\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n            <ul className=\"todo-list\">\r\n                {\r\n                    props.todoList.map((item, index) => {\r\n                    return (\r\n                        <li>\r\n                            <div className=\"view\">\r\n\r\n                                <input\r\n                                    className=\"toggle\"\r\n                                    type=\"checkbox\"\r\n                                    checked={item.chacked} onClick={() => {\r\n\r\n                                    }}\r\n                                />\r\n\r\n                                <label>{item.name}</label>\r\n\r\n                                <button className=\"destroy\" onClick={() => {\r\n\r\n                                }}>\r\n                                </button>\r\n\r\n                            </div>\r\n                        </li>\r\n                        )}\r\n                    )}\r\n            </ul>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default List;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport TodoFooter from './Components/Footer';\nimport List from './Components/List';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n             todoList: [],\n        }\n\n        const deleteItem = (deleteItem)=> {\n                this.setState(prev => {\n                    this.state.todoList = prev.todoList.filter((item) => {\n                        return item !== deleteItem;\n                    })\n                })\n            }\n\n        this.addToList = (itemName) => {\n            console.log('ghbdtn');\n            console.log(this.state.todoList);\n            const item = {\n                name: itemName,\n                chacked: false\n            }\n\n            this.setState(prev => {\n                this.state.todoList = [...prev.todoList, item]\n            })\n            console.log(this.state.todoList);\n        }\n\n        }\n\n\n\n\n    render() {\n\n        return (\n            <div className=\"App\">\n\n                <section className=\"todoapp\">\n                    <Header\n                        addToList = {this.addToList}\n                    />\n                    <List\n                        todoList = {this.state.todoList}\n                    />\n                    <TodoFooter/>\n                </section>\n\n                <footer className=\"info\">\n                    <p>Double-click to edit a todo</p>\n                    <p>Created by <a href=\"http://twitter.com/oscargodson\">Oscar Godson</a></p>\n                    <p>Refactored by <a href=\"https://github.com/cburgmer\">Christoph Burgmer</a></p>\n                    <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\n                </footer>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}